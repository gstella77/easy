@mixin animate($types...) {
	transition-duration: 0.3s;
	transition-property: $types;
	transition-timing-function: linear;
}

@mixin column {
	@include row;

	flex-direction: column;
}

@mixin flex($grow, $shrink, $basis) {
	@if $basis == 0 {
		flex-basis: 0%;
	} @else if type-of($basis) == number {
		flex-basis: rem($basis);
	} @else {
		flex-basis: auto;
	}

	flex-grow: $grow;
	flex-shrink: $shrink;
}

// TODO: See if this can be simplified while adding min, max, and print
@mixin media($size) {
	@if $size == sm {
		@media screen and (min-width: $screen-sm) {
			@content;
		}
	} @else if $size == md {
		@media screen and (min-width: $screen-md) {
			@content;
		}
	} @else if $size == lg {
		@media screen and (min-width: $screen-lg) {
			@content;
		}
	} @else {
		@media screen and (min-width: $screen-lg) {
			@content;
		}
	}
}

@mixin range {
	@include shadow(1);

	background: color(blue);
	border: rem(1) solid color(black);
	border-radius: rem(3);
}

@mixin row {
	align-items: flex-start;
	display: flex;
	justify-content: flex-start;
}

// Credit: https://css-tricks.com/snippets/sass/material-shadows-mixin/
@mixin shadow($depth, $color: black) {
	@if $depth < 1 {
		box-shadow: none;
	} @else if $depth > 5 {
		@warn "Invalid $depth `#{$depth}` for mixin `shadow`.";
	} @else {
		box-shadow: bottom-shadow($depth, $color), top-shadow($depth, $color);
	}
}

@mixin thumb {
	@include shadow(1, color(black));

	background: color(white);
	border: rem(1) solid color(black);
	border-radius: rem(3);
}

@mixin track {
	cursor: pointer;
	height: rem(16);
	width: 100%;
}
