{
  "overrides": [
    {
      "extends": [
        "plugin:@angular-eslint/recommended"
      ],
      "files": [
        "*.ts"
      ],
      "parserOptions": {
        "createDefaultProgram": true,
        "project": [
          "tsconfig.*?.json"
        ]
      },
      "rules": {
        "@angular-eslint/component-class-suffix": [
          "error",
          {
            "suffixes": [
              "Component"
            ]
          }
        ],
        "@angular-eslint/component-max-inline-declarations": [
          "error",
          {
            "animations": 8,
            "styles": 1,
            "template": 1
          }
        ],
        "@angular-eslint/component-selector": [
          "error",
          {
            "prefix": "app",
            "style": "kebab-case",
            "type": "element"
          }
        ],
        "@angular-eslint/contextual-lifecycle": "error",
        "@angular-eslint/directive-class-suffix": [
          "error",
          {
            "suffixes": [
              "Directive"
            ]
          }
        ],
        "@angular-eslint/directive-selector": [
          "error",
          {
            "prefix": "app",
            "style": "camelCase",
            "type": "attribute"
          }
        ],
        // "@angular-eslint/no-autofocus": "error",
        "@angular-eslint/no-attribute-decorator": "error",
        "@angular-eslint/no-conflicting-lifecycle": "error",
        "@angular-eslint/no-empty-lifecycle-method": "error",
        "@angular-eslint/no-forward-ref": "error",
        "@angular-eslint/no-host-metadata-property": "error",
        "@angular-eslint/no-input-prefix": [
          "error",
          {
            "prefixes": [
              "can",
              "has",
              "is",
              "should"
            ]
          }
        ],
        "@angular-eslint/no-input-rename": "error",
        "@angular-eslint/no-inputs-metadata-property": "error",
        "@angular-eslint/no-lifecycle-call": "error",
        "@angular-eslint/no-output-native": "error",
        "@angular-eslint/no-output-on-prefix": "error",
        "@angular-eslint/no-output-rename": "error",
        "@angular-eslint/no-outputs-metadata-property": "error",
        "@angular-eslint/no-pipe-impure": "error",
        "@angular-eslint/no-queries-metadata-property": "error",
        "@angular-eslint/prefer-on-push-component-change-detection": "error",
        "@angular-eslint/prefer-output-readonly": "error",
        "@angular-eslint/pipe-prefix": [
          "error",
          {
            "prefixes": [
              "app"
            ]
          }
        ],
        "@angular-eslint/relative-url-prefix": "error",
        "@angular-eslint/use-component-selector": "error",
        "@angular-eslint/use-component-view-encapsulation": "error",
        "@angular-eslint/use-injectable-provided-in": "error",
        "@angular-eslint/use-lifecycle-interface":"error",
        "@angular-eslint/use-pipe-decorator": "error",
        "@angular-eslint/use-pipe-transform-interface": "error",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/adjacent-overload-signatures": "error",
        "@typescript-eslint/array-type": [
          "error",
          {
            "default": "array",
            "readonly": "array"
          }
        ],
        // "@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/ban-ts-comment": [
          "error",
          { "minimumDescriptionLength": 10,
            "ts-check": false,
            "ts-expect-error": "allow-with-description",
            "ts-ignore": "allow-with-description",
            "ts-nocheck": "allow-with-description"
          }
        ],
        "@typescript-eslint/ban-tslint-comment": "error",
        "@typescript-eslint/ban-types": [
          "error",
          {
            "types": {
              /* "String": {
                "message": "Use string instead",
                "fixWith": "string"
              } */
            }
          }
        ],
        "@typescript-eslint/brace-style": [
          "error",
          "1tbs"
        ],
        "@typescript-eslint/class-literal-property-style": [
          "error",
          "getters"
        ],
        "@typescript-eslint/comma-dangle": [
          "error",
          "never"
        ],
        "@typescript-eslint/comma-spacing": [
          "error",
          {
            "after": true,
            "before": false
          }
        ],
        /* "@typescript-eslint/consistent-indexed-object-style": [
          "error",
          "record"
        ], */
        "@typescript-eslint/consistent-type-assertions": [
          "error",
          {
            "assertionStyle": "as",
            "objectLiteralTypeAssertions": "never"
          }
        ],
        "@typescript-eslint/consistent-type-definitions": [
          "error",
          "interface"
        ],
        "@typescript-eslint/consistent-type-imports": [
          "error",
          {
            "disallowTypeAnnotations": true,
            "prefer": "no-type-imports"
          }
        ],
        "@typescript-eslint/default-param-last": [
          "error"
        ],
        /* "@typescript-eslint/dot-notation": [
          "error",
          {
            "allowPrivateClassPropertyAccess": true
          }
        ], */
        "@typescript-eslint/explicit-function-return-type": [
          "error",
          {
            "allowConciseArrowFunctionExpressionsStartingWithVoid": false,
            "allowDirectConstAssertionInArrowFunctions": false,
            "allowExpressions": false,
            "allowHigherOrderFunctions": false,
            "allowTypedFunctionExpressions": false
          }
        ],
        "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {
            "accessibility": "explicit",
            "ignoredMethodNames": [

            ],
            "overrides": {
              "accessors": "explicit",
              "constructors": "explicit",
              "methods": "explicit",
              "parameterProperties": "explicit",
              "properties": "explicit"
            }
          }
        ],
        "@typescript-eslint/explicit-module-boundary-types": [
          "error",
          {
            "allowArgumentsExplicitlyTypedAsAny": false,
            "allowDirectConstAssertionInArrowFunctions": false,
            "allowedNames": [

            ],
            "allowHigherOrderFunctions": false,
            "allowTypedFunctionExpressions": false
          }
        ],
        "@typescript-eslint/func-call-spacing": [
          "error",
          "never"
        ],
        "@typescript-eslint/indent": [
          "error",
          "tab",
          {
            "ArrayExpression": 1,
            "CallExpression": {
              "arguments": 1
            },
            "flatTernaryExpressions": true,
            "FunctionDeclaration": {
              "body": 1,
              "parameters": 2
            },
            "FunctionExpression": {
              "body": 1,
              "parameters": 2
            },
            "ignoredNodes": [

            ],
            "ImportDeclaration": 1,
            "MemberExpression": 0,
            "ObjectExpression": 1,
            "offsetTernaryExpressions": true,
            "outerIIFEBody": 0,
            "SwitchCase": 1,
            "VariableDeclarator": {
              "const": 0,
              "let": 0,
              "var": 0
            }
          }
        ],
        "@typescript-eslint/init-declarations": [
          "error",
          "never",
          {
            "ignoreForLoopInit": true
          }
        ],
        "@typescript-eslint/keyword-spacing": [
          "error",
          {
            "after": true,
            "before": true,
            "overrides": {
              /* "if": {
                "after": true
              } */
            }
          }
        ],
        "@typescript-eslint/lines-between-class-members": [
          "error",
          "always",
          {
            "exceptAfterOverload": false,
            "exceptAfterSingleLine": true
          }
        ],
        "@typescript-eslint/member-delimiter-style": [
          "error",
          {
            "multiline": {
              "delimiter": "comma",
              "requireLast": true
            },
            "singleline": {
              "delimiter": "comma",
              "requireLast": true
            },
            "overrides": {
              "interface": {
                "multiline": {
                  "delimiter": "semi",
                  "requireLast": true
                },
                "singleline": {
                  "delimiter": "semi",
                  "requireLast": true
                }
              },
              "typeLiteral": {
                "multiline": {
                  "delimiter": "comma",
                  "requireLast": true
                },
                "singleline": {
                  "delimiter": "comma",
                  "requireLast": true
                }
              }
            }
          }
        ],
        /* "@typescript-eslint/member-ordering": [
          "error",
          {
            "default": [
              // Index signature
              "signature",

              // Fields
              "public-static-field",
              "protected-static-field",
              "private-static-field",

              "public-decorated-field",
              "protected-decorated-field",
              "private-decorated-field",

              "public-instance-field",
              "protected-instance-field",
              "private-instance-field",

              "public-abstract-field",
              "protected-abstract-field",
              "private-abstract-field",

              "public-field",
              "protected-field",
              "private-field",

              "static-field",
              "instance-field",
              "abstract-field",

              "decorated-field",

              "field",

              // Constructors
              "public-constructor",
              "protected-constructor",
              "private-constructor",

              "constructor",

              // Methods
              "public-static-method",
              "protected-static-method",
              "private-static-method",

              "public-decorated-method",
              "protected-decorated-method",
              "private-decorated-method",

              "public-instance-method",
              "protected-instance-method",
              "private-instance-method",

              "public-abstract-method",
              "protected-abstract-method",
              "private-abstract-method",

              "public-method",
              "protected-method",
              "private-method",

              "static-method",
              "instance-method",
              "abstract-method",

              "decorated-method",

              "method"
            ]
          }
        ], */
        "brace-style": "off",
        "comma-dangle": "off",
        "comma-spacing": "off",
        "default-param-last": "off",
        "dot-notation": "off",
        "func-call-spacing": "off",
        "indent": "off",
        "init-declarations": "off",
        "keyword-spacing": "off",
        "lines-between-class-members": "off",
        "max-len": [
          "error",
          {
            "code": 160
          }
        ],
        "quotes": [
          "error",
          "single",
          {
            "allowTemplateLiterals": true,
            "avoidEscape": true
          }
        ]
      }
    },
    {
      "extends": [
        "plugin:@angular-eslint/template/recommended"
      ],
      "files": [
        "*.component.html"
      ],
      "rules": {
        "@angular-eslint/template/banana-in-box": "error",
        "@angular-eslint/template/cyclomatic-complexity": [
          "error",
          {
            "maxComplexity": 1
          }
        ],
        "@angular-eslint/template/no-call-expression": "error",
        "@angular-eslint/template/no-negated-async": "error",
        "@angular-eslint/template/no-positive-tabindex": "error",
        "max-len": [
          "error",
          {
            "code": 160
          }
        ],
        "quotes": [
          "error",
          "double",
          {
            "allowTemplateLiterals": true,
            "avoidEscape": true
          }
        ]
      }
    },
    {
      "extends": [
        "plugin:@angular-eslint/template/process-inline-templates"
      ],
      "files": [
        "*.component.ts"
      ]
    }
  ],
  "root": true
}
